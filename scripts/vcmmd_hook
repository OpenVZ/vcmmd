#!/usr/bin/python2
#
# Copyright (c) 2016-2017, Parallels International GmbH
# Copyright (c) 2017-2020, Virtuozzo International GmbH, All rights reserved
#
# This file is part of OpenVZ. OpenVZ is free software; you can redistribute
# it and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the License,
# or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.
#
# Our contact details: Virtuozzo International GmbH, Vordergasse 59, 8200
# Schaffhausen, Switzerland.

from __future__ import print_function
import libvirt
import sys
import xml.etree.ElementTree as ET
from vcmmd.ve_type import VE_TYPE_VM, VE_TYPE_VM_LINUX, VE_TYPE_VM_WINDOWS
from vcmmd.ve_config import VEConfig, VCMMD_MEMGUARANTEE_PERCENTS
from vcmmd.error import VCMMDError, VCMMD_ERROR_VE_NAME_ALREADY_IN_USE
from vcmmd.rpc.dbus.client import RPCProxy


DEFAULT_VM_GUARANTEE = 40


try:
    import prlsdkapi
    from prlsdkapi import consts
    VE_OSTYPE_MAP = {
        consts.PVS_GUEST_TYPE_WINDOWS: VE_TYPE_VM_WINDOWS,
        consts.PVS_GUEST_TYPE_LINUX: VE_TYPE_VM_LINUX,
    }
except ImportError:
    print('Failed to import prlsdkapi')
    sys.exit(-1)


def get_libvirt_vm(vm_name):
    conn = libvirt.open('qemu:///system')
    if not conn:
        raise Exception('Failed to open connection to libvirtd')
    dom = conn.lookupByName(vm_name)
    if dom is None:
        raise Exception('Failed to get the domain object {}'.format(vm_name))
    return dom


def get_prlsdk_vm(vm_name):
    helper = prlsdkapi.ApiHelper()
    helper.init(consts.PRL_VERSION_7X)
    srv = prlsdkapi.Server()
    srv.login_local().wait()
    vm_list = srv.get_vm_list_ex(consts.PVTF_VM).wait()
    for vm in vm_list:
        if vm.get_name() == vm_name:
            return vm
    raise Exception('Failed to find the VM {}'.format(vm_name))


def make_vm_config(vm_name):
    prlsdk_vm = get_prlsdk_vm(vm_name)
    libvirt_vm = get_libvirt_vm(vm_name)
    if prlsdk_vm.is_ram_hotplug_enabled():
        ram_size = prlsdk_vm.get_ram_size() << 20
    else:
        ram_size = libvirt_vm.maxMemory() << 10
    video = ET.fromstring(libvirt_vm.XMLDesc()).findall("./devices/video/model")
    video_ram_size = sum(int(v.attrib.get('vram', 0)) for v in video) << 10
    mem_guar = prlsdk_vm.get_mem_guarantee_size()
    guar_pct = mem_guar[1] if mem_guar[0] == VCMMD_MEMGUARANTEE_PERCENTS else DEFAULT_VM_GUARANTEE
    config = {
        'nodelist': str(prlsdk_vm.get_node_mask()),
        'cpulist': str(prlsdk_vm.get_cpu_mask()),
        'limit': ram_size,
        'vram': video_ram_size,
        'guarantee': ram_size * guar_pct / 100,
        'guarantee_type': mem_guar[0],
    }
    vm_type = VE_OSTYPE_MAP.get(prlsdk_vm.get_os_type(), VE_TYPE_VM)
    return libvirt_vm.UUIDString(), vm_type, config


def handle_vm_started(vm_name):
    uuid, vm_type, config = make_vm_config(vm_name)
    proxy = RPCProxy()
    try:
        proxy.register_ve(uuid, vm_type, VEConfig(**config), 0)
    except VCMMDError as e:
        if e.errno != VCMMD_ERROR_VE_NAME_ALREADY_IN_USE:
            raise
    proxy.activate_ve(uuid, 0)


def handle_vm_stopped(vm_name):
    uuid, _, _ = make_vm_config(vm_name)
    proxy = RPCProxy()
    proxy.deactivate_ve(uuid)
    proxy.unregister_ve(uuid)


def main():
    if len(sys.argv) != 5:
        print('Unknown command-line arguments:', *sys.argv)
        return -1
    vm_name, vm_status = sys.argv[1:3]
    try:
        if vm_status == 'started':
            handle_vm_started(vm_name)
        elif vm_status == 'stopped':
            handle_vm_stopped(vm_name)
    except Exception as e:
        print(e)
        return -1
    return 0


if __name__ == '__main__':
    sys.exit(main())
